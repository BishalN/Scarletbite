// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator zod {
  provider                 = "zod-prisma"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    orders        Order[]
    pereference  Preference?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// TODO: add the measure for the menu item could be plate, cup, boul, gm, kg etc
model MenuItem {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Float
  isAvailable Boolean
  thumbnail   String?
  orders      OrderItem[]
}

model Order {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  status      OrderStatus @default(PENDING)
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  orderItems  OrderItem[]
}

model OrderItem {
  id          Int        @id @default(autoincrement())
  quantity    Int
  menuItem    MenuItem   @relation(fields: [menuItemId], references: [id])
  menuItemId  Int
  order       Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     Int
}

enum OrderStatus {
  PENDING
  PREPARING
  READY // what is this ? not clear ready vs completed may be ready for pickup
  COMPLETED // finished cooking now need to make it ready for pickup
  CANCELED
}

enum Role {
  USER
  ADMIN
}

model Preference {
  id             Int       @id @default(autoincrement())
  currency       String
  cashOnDelivery Boolean   @default(true)
  user           User      @relation(fields: [userId], references: [id])
  userId         String    @unique
}